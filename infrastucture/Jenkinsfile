pipeline {
    // agent {
    //     label "jenkins-slave-kubectl"
    // }  
      agent {
        //kubernetes {
         // yamlFile getAgent()      
        //}
        kubernetes {
      label 'sample-app'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  component: ci
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: cd-jenkins
  containers:
  - name: golang
    image: golang:1.10
    command:
    - cat
    tty: true
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    command:
    - cat
    tty: true
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
"""
}

    }
    environment {
        BRANCH = "${params.environment}"
        PROJECT_NAME = "${params.project_name}"
        DOCKER_COMIT = "${params.docker_commit[0..6]}" // Name that we use to refer the container image
    }
    stages {
            stage('Checkout') {
                steps {
                    checkout scm
                }
            }
            stage('PrintCommit') {
                steps {
                    print "${params.docker_commit[0..7]}"
                    print "${params.environment}"
                }
            }
            stage('Replace Commit & Environment'){
                steps {
                        sh "sed -i s/GIT_COMMIT/${env.DOCKER_COMIT}/g ./infrastucture/*.yaml && cat ./infrastucture/*.yaml"
                        sh "sed -i s/ENVIRONMENT/${env.BRANCH}/g ./infrastucture/*.yaml && cat ./infrastucture/*.yaml"
                }
            }
            stage('Deploying to Kubernetes'){
                      agent {
            kubernetes {
                label 'nested-pod'
                yaml """
spec:
  containers:
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
"""
            }
        }
                steps {
                        // sh "cd ./infrastucture &&\
                        // ls -lia &&\
                        // kubectl apply -f 00-NS.yaml &&\
                        // kubectl apply -f 03-DEPLOYMENT.yaml &&\
                        // kubectl apply -f ."
                            //withKubeConfig([credentialsId: 'clusterk8sconfi	', serverUrl: 'https://kubernetes.default' ]) {
                            //withKubeConfig([credentialsId: 'clusterk8sconfig', serverUrl: 'https://kubernetes.default'  ]) {
                        //kubernetesDeploy(configs: "./infrastucture/00-NS..yaml", kubeconfigId: "jenkins-k8s-auth")
                             //  sh 'kubectl apply -f ./infrastucture/*.yaml'
                            //}

                        container('kubectl') {
                        // Change deployed image in canary to the one we just built
                        //step([$class: 'KubernetesEngineBuilder', namespace:'production', projectId: env.PROJECT, clusterName: env.CLUSTER, zone: env.CLUSTER_ZONE, manifestPattern: 'k8s/canary', credentialsId: env.JENKINS_CRED, verifyDeployments: true])
                            //sh 'kubectl apply -f ./infrastucture/*.yaml'
                            sh 'kubectl apply -f ./infrastucture/00-NS.yaml'
                        }
                }

            }
        }
          post {
            always {
                echo "========pipeline executed ========"
            }
            success {
                echo "========pipeline executed successfully ========"
            }
            unstable {
                echo "========pipeline execution failed========"
            }
            failure {
                echo "========pipeline execution failed========"
            }
        }
}


def getAgent(){
agent =  """
apiVersion: v1
kind: Pod
metadata:
labels:
  name: jenkins-slave
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: cd-jenkins
  containers:
  - name: docker
    image: jrmanes/jenkins-slave-docker:latest
    workingDir: /home/jenkins
    volumeMounts:
    - name: docker-sock-volume
      mountPath: /var/run/docker.sock
    command:
    - cat
    tty: true
    volumes:
    - name: docker-sock-volume
      hostPath:
      path: /var/run/docker.sock
  - name: golang
    image: golang:1.10
    command:
    - cat
    tty: true
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    command:
    - cat
    tty: true
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
"""
return agent
}