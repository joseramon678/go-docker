pipeline {
      agent {
        kubernetes {
        label "jenkins-slave-kubectl"
        defaultContainer 'jnlp'
        yaml getAgent()
      }
    }
    environment {
        BRANCH = "${params.environment}"
        PROJECT_NAME = "${params.project_name}"
        DOCKER_COMMIT = "${params.docker_commit[0..6]}" // Name that we use to refer the container image
    }
    stages {
            stage('Checkout') {
                steps {
                    checkout scm
                }
            }
            stage('PrintCommit') {
                steps {
                    print "${params.docker_commit[0..7]}"
                    print "${params.environment}"
                }
            }
            stage('Replace Commit & Environment'){
                steps {
                        sh "sed -i s/GIT_COMMIT/${env.DOCKER_COMMIT}/g ./infrastucture/*.yaml && cat ./infrastucture/*.yaml"
                        sh "sed -i s/ENVIRONMENT/${env.BRANCH}/g ./infrastucture/*.yaml && cat ./infrastucture/*.yaml"
                }
            }
            stage('Deploying to Kubernetes'){
            agent {
              kubernetes {
                  //label 'nested-pod'
                  label "jenkins-slave-kubectl"
                  yaml   """  
spec:
  containers:
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
"""
              }
            }
              steps {
                       sh "cd ./infrastucture &&\
                        ls -lia"
                        container('kubectl') {
                        // Change deployed image in canary to the one we just built
                             sh 'cd ./infrastucture &&  kubectl apply -f .'
                        }
                }
            }
        }
          post {
            always {
                echo "========pipeline executed ========"
            }
            success {
                echo "========pipeline executed successfully ========"
            }
            unstable {
                echo "========pipeline execution failed========"
            }
            failure {
                echo "========pipeline execution failed========"
            }
        }
}

def getAgent(){
agent =  """
apiVersion: v1
kind: Pod
metadata:
labels:
  name: jenkins-slave
spec:
  # Use service account that can deploy to all namespaces
  serviceAccountName: jenkins
  containers:
  - name: docker
    image: jrmanes/jenkins-slave-docker:latest
    workingDir: /home/jenkins
    volumeMounts:
    - name: docker-sock-volume
      mountPath: /var/run/docker.sock
    command:
    - cat
    tty: true
    volumes:
    - name: docker-sock-volume
      hostPath:
      path: /var/run/docker.sock
  - name: golang
    image: golang:1.10
    command:
    - cat
    tty: true
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    command:
    - cat
    tty: true
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
"""
return agent
}

def getK8SAgent(){
agent =  """  
spec:
  containers:
  - name: kubectl
    image: gcr.io/cloud-builders/kubectl
    command:
    - cat
    tty: true
"""
return agent
}
